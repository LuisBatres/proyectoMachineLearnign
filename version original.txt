import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import io
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Funcion para convertir el dataframe a excel
def df_a_excel(df):
    # Crear un buffer en memoria
    output = io.BytesIO()
    # Escribir el DataFrame a Excel en el buffer
    with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False, sheet_name="Datos")
    # Volver al inicio del buffer para que pueda ser descargado
    output.seek(0)
    return output.read()

st.markdown(
    """
    <style>
        .stApp {
            background-color: ##212b36;
        }

    </style>
    """, unsafe_allow_html=True)

# Menú de opciones
menu = ["Inicio", "Cargar Datos", "Preprocesamiento de Datos", "Análisis Estadístico", "Visualización de Datos", "Modelado", "Exportar Resultados"]
choice = st.sidebar.selectbox("Menú", menu)

# Manejo de sesion para manipular la información en cada modulo
if 'data' not in st.session_state:
    st.session_state.data = None

# 0. Inicio
if choice == "Inicio":
    st.subheader("Analisis de Datos y Machine Learning.")

    st.image("tec logo.png", width=200)
    # Título del proyecto
    st.title("Sistema de Análisis Financiero para Empresas y Negocios. 📊")
    # Header del proyecto
    st.header("PROYECTO FINAL. \n Luis Enrique Batres Martinez - 20130806")
    # Objetivo del proyecto
    st.text("Objetivo: lorem ipsum")

# 1. Cargar Datos
if choice == "Cargar Datos":
    st.subheader("Carga de Datos")

    # Cargar archivo
    uploaded_file = st.file_uploader("Subir archivo CSV o Excel", type=["csv", "xlsx"])
    
    if uploaded_file is not None:
        try:
            # Leer CSV o Excel
            if uploaded_file.name.endswith(".csv"):
                st.session_state.data = pd.read_csv(uploaded_file)
            else:
                st.session_state.data = pd.read_excel(uploaded_file)

            st.write("Datos cargados exitosamente:")
            st.write(st.session_state.data)
        except Exception as e:
            st.error(f"Error al cargar archivo: {e}")

# 2. Preprocesamiento de Datos
elif choice == "Preprocesamiento de Datos":
    st.subheader("Preprocesamiento de Datos")

    if st.session_state.data is not None:
        data = st.session_state.data.copy()  # Copia de datos para mantener el original

        st.write("Opciones:")

        # Eliminar filas con valores nulos
        if st.checkbox("Limpieza (Eliminar valores nulos)"):
            data = data.dropna()
            st.write("Valores nulos eliminados:")
            st.write(data)

        # Reemplaza datos nulos a 0
        if st.checkbox("Limpieza (Reemplazar valores nulos)"):
            data = data.fillna(0)
            st.write("Valores nulos reemplazados:")
            st.write(data)
        
        # Normalización de datos numéricos
        if st.checkbox("Normalizar datos"):
            num_cols = data.select_dtypes(include=['float64', 'int64']).columns
            data[num_cols] = (data[num_cols] - data[num_cols].min()) / (data[num_cols].max() - data[num_cols].min())
            st.write("Datos normalizados:")
            st.write(data)
        
        # Actualizar los datos en session_state
        st.session_state.data = data
    else:
        st.warning("Primero cargue un archivo de datos en la sección 'Cargar Datos'.")

# 3. Análisis Estadístico
elif choice == "Análisis Estadístico":
    st.subheader("Análisis Estadístico")

    if st.session_state.data is not None:
        st.write("Estadísticas Descriptivas:")
        st.write(st.session_state.data.describe())

        st.write("Correlación entre variables financieras:")
        st.write(st.session_state.data.corr())
    else:
        st.warning("Primero cargue un archivo de datos en la sección 'Cargar Datos'.")

# 4. Visualización de Datos
elif choice == "Visualización de Datos":
    st.subheader("Visualización de Datos")

    if st.session_state.data is not None:
        # Gráfico de barras
        st.write("Distribución de Ventas por Mes")
        fig, ax = plt.subplots()
        sns.barplot(data=st.session_state.data, x="Mes", y="Ventas", ax=ax)
        st.pyplot(fig)

        # Mapa de calor de correlación
        st.write("Mapa de Calor de Correlación entre Variables")
        fig, ax = plt.subplots()
        sns.heatmap(st.session_state.data.corr(), annot=True, cmap="coolwarm", ax=ax)
        st.pyplot(fig)
    else:
        st.warning("Primero cargue un archivo de datos en la sección 'Cargar Datos'.")

# 5. Modelado de Machine Learning
elif choice == "Modelado":
    st.subheader("Modelado de Machine Learning")

    if st.session_state.data is not None:
        # Separar características y variable objetivo
        X = st.session_state.data[['Ingresos', 'Publicidad']]
        y = st.session_state.data['Ventas']

        # Dividir en conjuntos de entrenamiento y prueba
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

        # Entrenar modelo de regresión lineal
        model = LinearRegression()
        model.fit(X_train, y_train)
        predictions = model.predict(X_test)

        # Métrica de evaluación
        mse = mean_squared_error(y_test, predictions)
        st.write(f"Error cuadrático medio (MSE): {mse:.2f}")
    else:
        st.warning("Primero cargue un archivo de datos en la sección 'Cargar Datos'.")

# 6. Exportar Resultados
elif choice == "Exportar Resultados":
    st.subheader("Exportación de Resultados")

    st.markdown(
    """
    <style>
        .stDownloadButton > button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 12px 28px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
        }
        .stDownloadButton > button:hover {
            background-color: #45a049;
        }
    </style>
    """, unsafe_allow_html=True)

    if st.session_state.data is not None:
        # Botón para exportar datos procesados
        st.download_button(
            label="📥 Descargar CSV",
            data=st.session_state.data.to_csv(index=False).encode('utf-8'),
            file_name="datos_analizados.csv",
            mime='text/csv'
        )

        st.download_button(
            label="📥 Descargar Excel",
            data=df_a_excel(st.session_state.data),  # Llamar a la función que convierte los datos a Excel
            file_name="datos_procesados.xlsx",  # Nombre del archivo de salida
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"  # MIME type para Excel
        )
    else:
        st.warning("Primero cargue un archivo de datos en la sección 'Cargar Datos'.")


st.markdown(
    """
    <footer style="position: fixed; bottom: 0; width: 100%; text-align: left; font-size: 12px; color: #888888;">
        <p>&copy; 2024 Luis Enrique Batres Martinez - Proyecto de Análisis Financiero</p>
    </footer>
    """, unsafe_allow_html=True)
